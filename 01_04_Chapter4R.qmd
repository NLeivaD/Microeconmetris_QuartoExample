---
title: "Chapter 4"
bibliography: references.bib
engine: knitr
---

```{r echo=FALSE}
knitr::opts_chunk$set(message = F, warning = F)
rm(list = ls())
```

# Tools required for Chapter 4
In this chapter you will see the use of a new type of function that hasn't been used yet, this function is the `sapply` function. The `sapply` function belongs to the `apply`'s family of functions that are a powerful suite of tools for performing operations iteratively over the elements on various types of data structures. These functions are particularly useful for applying an specific function to elements of a data structure, such as matrices, lists, or data frames, without the need for explicit loops. Here we present an introduction to the most commonly used functions: `apply`, `lapply`, `sapply`, `tapply` and `mapply`.  

1. The `apply` function is used to apply a function to the rows or columns of a matrix or to the margins of an array. As a simple example consider a $3times3$ matrix and calculate the mean of each row in three ways: (i) Manually indexing each row, (ii) With a loop iterating over each row number and (iii) using the `apply` function:

```{r}
# Create a 3x3 matrix for the example
x <- matrix(1:9, nrow = 3)

# Get the mean of each row manually
mean(x[1,])
mean(x[2,])
mean(x[3,])

# Iterate over each row with a loop
for(i in 1:nrow(x)){print(mean(x[i,]))}

# Use the apply function
apply(X = x, MARGIN = 1, FUN = mean)
```

Note the use of the arguments in the function: `X` argument refer to the object over we want to apply the function, `MARGIN` point the dimension along we want to apply the function and `FUN` is the function to apply.  If you see the help documentation of the `apply` function there is a `...` in the arguments that is for additional arguments for the functions. As an example below we replace one of the elements of the matrix with a missing value and, as you could know until now, if you use the mean function with a missing value in the vector it returns a missing value unleast you specify the `na.rm = TRUE` argument.

```{r}
# Assign the missing value
x[2,2] <- NA

# Apply mean to the rows
apply(X = x, MARGIN = 1, FUN = mean)

# Specify the additional argument
apply(X = x, MARGIN = 1, FUN = mean, na.rm = T)
```

2. The `lapply` function applies a function to each element of a list and returns a list. Below we create a list and try to use the `apply` function seeing how an error is returned as a list object doesn't have a dimension

```{r error = TRUE}
# Create a list
x <- list(Nums = rep(1:3, 3), Letters = rep(c("A", "B", "C"), 3))

# Apply function as error
apply(X = x, FUN = unique)

# Inspect the dimension
dim(x)
```

Now instead the `lapply` function operate without problem

```{r}
lapply(X = x, FUN = unique)
```

3. The `sapply` function is a variant of lapply that simplifies the result to a vector or matrix if possible with the `simplify` argument as `TRUE`, instead if we specify `simplify = FALSE` we get the same result as in `lapply` function.

```{r}
# Sapply as the same result of lapply
sapply(X = x, FUN = unique, simplify = F)

# Sapply as the default functionaility
sapply(X = x, FUN = unique)
```

4. The `tapply` function applies a function over subsets of a vector, defined by some other vector that interprets like a factor. Below we make a simple example using first groups defined by some variable and then by a factor variable, showing that get the same result

```{r}
# Create vector of values
values <- 1:9

# Create vector of groups
groups <- rep(c("A", "B", "C"), 3)

# Use of tapply without factor
tapply(X = values, INDEX = groups, FUN = mean)

# Groups as factor
groups <- as.factor(groups)

# Use of tapply with factor
tapply(X = values, INDEX = groups, FUN = mean)
```

Another remark in `tapply` function is that works as `sapply` and try to return a dataframe or matrix, but if you specify `simplify = FALSE` it will return a list.

5. The `mapply` function is a multivariate version of sapply. It applies a function to the first elements of each argument, the second elements, and so on. As an example consider the next example where we have two elements: `v1` and `v2`

```{r}
# Create values
v1 <- c(1,2)
v2 <- c(3,4)

# Get sum of the first elements of each object
v1[1] + v2[1]

# Get sum of the second elements of each object
v1[2] + v2[2]

# Use of mapply function
mapply(FUN = sum, v1, v2)
```

One remark is that this function iterates over the elements of the different objects we impute so the different inputs must have same length or lengths such that each length be a multiple of the shorters lengths, if we don't accomplish this requirement we will get an error

```{r error = TRUE}
# Create one element of length 3
v2 <- 3:5

# Get error as the lengths aren't multiple
mapply(FUN = sum, v1, v2)
```

Finally we show how with lengths that are multiple it works fine by just repeat the shorter length element in the same order

```{r}
# Create one element of length 4
v2 <- 3:6

# Get error as the lengths aren't multiple
mapply(FUN = sum, v1, v2)
```

# Code Call-outs

## Code Call-out 4.1: Wild cluster bootstrap implementation
To see the difference between the wild cluster bootstrap described in Section 4.2.3.2 of the book and other clustering options such as standard cluster bootstrap or clustered standard errors we will set up an example by hand of the wild cluster bootstrap.  We will do this with data provided by @PorterSerra2020 who conducted a field experiment which sought to test whether student exposure to engaging and successful women instructors in early economics classes increases the likelihood that female students go on to major in economics.  The dataset is provided under the name `PorterSerra2020.csv`, and we will open this data as `data` below:

```{r}
data <- read.csv2("Datasets/PorterSerra2020.csv")
```

Following @PorterSerra2020 we will estimate the following linear probability model (LPM)
$$Y_{i} = \beta_0 + \beta_1 dt_i + \beta_2 dT_i + \beta_3 dt_i \times dT_i + \delta \mathbf{X}_i + \varepsilon_i$$
where we use identical notation from their paper.  Treatment was randomly applied at the class level in 2016, and classes also existed in 2015, but no treatment was applied.  Above, $Y_i$ is a student's (binary) decision of whether or not to major in economics (`econmajor`), $dt_i$ (`yr_2016`) a dummy equal to one if she took the class in 2016 and zero if she took a class in 2015, and $dT_i$ (`treatment_class`) is a dummy equal to one if she is in a treatment class, and zero if she is in a control class. The interaction between these two dummies (`treat2016`) is the coefficient of interest and $\mathbf{X}_i$ is a vector of individual, demographic and class controls such as if the course was taught by a female professor (`female_prof`), if the student is an in-state student (`instate`), if the student is in freshman year (`freshman`), if the student is american (`american`), the student's cumulative GPA (`ACumGPA`), the student's grade in their Principles of Economics course (`gradePrinciples`) and if the student take a class with a limit of 40 students (`small_class`).  As treatment is assigned at the class level (`class_fe2`), and as there are few clusters (12 clusters), the authors proceed to conduct inference using a wild cluster bootstrap.  We conduct this procedure below.

Here in particular we are interested in the parameter $\beta_3$ which under difference-in-difference assumptions will identify the effect of female role models on future enrollment in an economics major.  Before examining this process, we will estimate the LPM in order to get an estimate of the coefficient of interest $\widehat{\beta}_3$, along with the (traditional) cluster-robust standard error $se\left(\widehat{\beta}_3\right)$, and resulting $t$-statistic for the test of a null effect: $t=\left(\widehat{\beta}_3 - 0\right)/se\left(\widehat{\beta}_3\right)$.  We will do this using the `felm` function from the `lfe` package to estimate our regression model. The usage of this function includes a four-part formula where the first part is a conventional formula as in `lm`, the second part is the variables that determine the fixed effects (or 0 if no fixed effects are desired), the third part is for an IV formula (or 0 if OLS is desired) and the last part is a variable to use if clustered standard errors are desired. As we are not estimating with fixed effects or IV we indicate 0 in the second and third portion of the formula:

```{r}
data$ACumGPA <- as.numeric(data$ACumGPA)
data$gradePrinciples <- as.numeric(data$gradePrinciples)
library(lfe)
LPM <- felm(data = data, subset = (female == 1),
          formula = econmajor ~ yr_2016 + treatment_class + treat2016 +
            female_prof + instate + freshman + american + ACumGPA +
            gradePrinciples + small_class | 0 | 0 | class_fe2)
summary(LPM)
```

It can be seen that the coefficient of interest is 0.0801 (as per column 4 of Table 4 of @PorterSerra2020) with a cluster-robust standard error of 0.0364 and a resulting t-statistic of 2.197. Below, we store these values along with the residuals of this unrestricte regression $\widehat{\varepsilon}$:

```{r}
beta3_hat    <- LPM$coefficients["treat2016",]
se_beta3_hat <- as.numeric(LPM$cse["treat2016"])
t_beta3_hat  <- as.numeric(LPM$ctval["treat2016"])
eps_hat      <- LPM$residuals
```

Because we are interested in considering the variation of data in a model where we assume the null hypothesis $\beta_3=0$ is true, we will now *impose* this hypothesis, and re-estimate our model.  We do this below, imposing the restriction $\beta_3 = 0$ by simply omiting the `treat2016` variable from the model, storing the restricted residuals from this regression as $\tilde{\varepsilon}$. 

```{r}
LPM_r <- felm(data = data, subset = (female == 1),
              formula = econmajor ~ yr_2016 + treatment_class +
                female_prof + instate + freshman + american + ACumGPA +
                gradePrinciples + small_class | 0 | 0 | class_fe2)
eps_tilde <- LPM_r$residuals
```

These restricted residuals `eps_tilde` above will be key in our wild cluster bootstrap procedure.  For a given bootstrap replication, for each cluster we will assign a value of -1 or +1, and multiply the previous residuals by this (cluster-specific) value.  This will maintain correlations between residuals fixed within each cluster, but allow correlations to vary between clusters.  We will thus generate a new "sample" of data taking original data and updated residuals, resulting in a new outcome for $Y_i$.

Below we will initialise this wild cluster bootstrap procedure, setting some large amount of bootstrap replicates (here 999), before storing the data we need as `bsample` using base `R`'s new pipe function $|>$ to send the output from the left-hand command into the right-hand command.  We will then also incorporate the residuals from above into this dataframe, so `bsample` contains all relevant covariates, as well as the restricted residuals.  It is worth noting, that in practice, all we require from these covariates is the ability to form $\widehat{Y}_i=\widehat\beta_0+\widehat\beta_1 dt_i + \widehat\beta_2 dT_i + \widehat\delta \mathbf{X}_i$, and we could actually just work with the quantity $\widehat{Y}_i$ below (you may wish to confirm this to yourself by editing the code below).  However, for ease of exposition we will work with the full set of covariates in code below, even though this is somewhat less efficient.

```{r}
B = 999
WildClusterBootstrap <- data.frame(beta3 = rep(NA, B),
                                   se_beta3 = rep(NA, B),
                                   t_stat = rep(NA, B))
library(dplyr)
bsample <- data |> filter(female == 1) |>
	   select(econmajor, yr_2016, treatment_class, treat2016, 
            	  female_prof, instate, freshman, american, ACumGPA, 
         	  gradePrinciples, small_class, class_fe2)
bsample$eps_tilde = as.numeric(eps_tilde)
```

Now let's see what each iteration of a wild cluster bootstrap looks like.  As we will generate our new sample of data by (randomly) selecting values of -1 or 1 for each cluster to form "resampled" residuals, we will start by drawing these "Rademacher" weights for each cluster.  Below we do this by first generating a cluster-specific draw for each cluster $g$ which assigns $a_g = 1$ or $a_g = -1$ with probability 0.5 (as seen in `clusters`).  This value $a_g$ is joined into our main data:
```{r}
clusters <- data.frame(class_fe2 = unique(data$class_fe2),
                       ag = sample(c(-1,1), size = 12, replace = T))
print(clusters)		       
bsample <- bsample |> left_join(clusters, by = "class_fe2")
```
Now, based on this draw and the original errors from the restricted model, we will generate the new set of bootstrap errors, which below we call `berrors`:
```{r}
bsample <- bsample |> mutate(berrors = eps_tilde * ag)
```
Finally, below we will generate our new resampled outcome variable `beconmajor` from covariates, restricted regression estimates, and our resampled error term `berrors`.
```{r}
bsample <- bsample |> 
  mutate(beconmajor = LPM_r$beta["(Intercept)",] +
           LPM_r$beta["yr_2016",] * yr_2016 +
           LPM_r$beta["treatment_class",] * treatment_class +
           LPM_r$beta["female_prof",] * female_prof +
           LPM_r$beta["instate",] * instate +
           LPM_r$beta["freshman",] * freshman +
           LPM_r$beta["american",] * american +
           LPM_r$beta["ACumGPA",] * ACumGPA +
           LPM_r$beta["gradePrinciples",] * gradePrinciples +
           LPM_r$beta["small_class",] * small_class +
           berrors)
```

With this data in hand, we estimate the non-restricted model exactly as we did so previously with `felm`.  Below, we estimate this model, and examine summary output:

```{r}
LPM_b <- felm(data = bsample,
              formula = beconmajor ~ yr_2016 + treatment_class +
	      treat2016 + female_prof + instate + freshman +
              american + ACumGPA + gradePrinciples + 
              small_class | 0 | 0 | class_fe2)
summary(LPM_b)
```

You will note here that the coefficient of interest (that on `treat2016`) is small and insignificant.  This should not be surprising to us, as we have imposed that this coefficient should be zero in the process where we generated `beconmajor` previously.  The idea of this process is that in this way we should have some idea of the variation we may expect in parameter estimates when the true parameter actually *is* zero.  If we observe that our true estimate greatly exceeds these "null" estimates, we may be willing to conclude that the original effect is real.  We store the relevant values from our regression model below to calculate a t-statistic from this bootstrap replicate.

```{r}
WildClusterBootstrap$beta3[1]    <- LPM_b$beta["treat2016",]
WildClusterBootstrap$se_beta3[1] <- LPM_b$cse["treat2016"]
WildClusterBootstrap$t_stat[1]   <- LPM_b$ctval["treat2016"]
```
We wish to see how extreme our original t-statistic is compared to many t-statistics generated in this way, where the null is imposed.  Thus, we will now repeat the previous bootstrap replicate $B-1$ more times in a loop, so that we have $B$ t-statistics.

```{r}
for (b in 2:B) {
  # Erase from common data frame the data of previous replication
  bsample <- bsample |> select(-c(ag, berrors, beconmajor))
  # Add new replication data
  clusters <- data.frame(class_fe2 = unique(data$class_fe2),
                       ag = sample(c(-1,1), size = 12, replace = T))
  bsample <- bsample |> left_join(clusters, by = "class_fe2") |>
    mutate(berrors = eps_tilde * ag) |> 
  mutate(beconmajor = LPM_r$beta["(Intercept)",] +
           LPM_r$beta["yr_2016",] * yr_2016 +
           LPM_r$beta["treatment_class",] * treatment_class +
           LPM_r$beta["female_prof",] * female_prof +
           LPM_r$beta["instate",] * instate +
           LPM_r$beta["freshman",] * freshman +
           LPM_r$beta["american",] * american +
           LPM_r$beta["ACumGPA",] * ACumGPA +
           LPM_r$beta["gradePrinciples",] * gradePrinciples +
           LPM_r$beta["small_class",] * small_class +
           berrors)
  # Estimate artificial model
  LPM_b <- felm(data = bsample,
                formula = beconmajor ~ yr_2016 + treatment_class +
                treat2016 + female_prof + instate + freshman +
                american + ACumGPA + gradePrinciples + 
                small_class | 0 | 0 | class_fe2)
  # Store values
  WildClusterBootstrap$beta3[b]    <- LPM_b$beta["treat2016",]
  WildClusterBootstrap$se_beta3[b] <- LPM_b$cse["treat2016"]
  WildClusterBootstrap$t_stat[b]   <- LPM_b$ctval["treat2016"]
}
```

We can see below what this "null distribution" of t-statistics looks like.  It is not a surprise that these are centred around 0, because this is what our model has imposed.  However, more interesting than this is to see they type of variation in t-statistics which we can expect in our data with null effects imposed.  We can see, below, that this looks somewhat heavier-tailed than a standard t-distribution.

```{r}
hist(WildClusterBootstrap$t_stat, breaks=20, xlab='Bootstrap t-statistics',
     main=NULL)
```

From this distribution we can calculate a p-value by asking what proportion of t-statistics from the null distribution exceed our estimated t-statistic from the unrestricted model.  We do this below, observing that the p-value is quite close to that reported in @PorterSerra2020 (who report a p-value of 0.089), only differing due to random variation in draws of the Rademacher weights.


<!--
Now we compare our original $t$-statistic `r round(t_beta3_hat, 3)` with the 97.5 percentile of the $t$-statistics computed in our bootstraping to see if we can reject the null of $\beta_3 = 0$ to a 5% significance level

```{r}
t97_5 <- quantile(WildClusterBootstrap$t_stat, 0.975)
if(abs(t_beta3_hat) > abs(t97_5)){
  print("The null is rejected.")
} else {
  print("We can't reject the null.")
}
```
-->

```{r}
pval <- mean(abs(WildClusterBootstrap$t_stat) > 
               abs(t_beta3_hat))
paste0("The p-value is: ", round(pval, 3))
```

We also could repeat this exercise with the `bootest` function from the `fwildclusterboot` developed by @FischerRoodman2021 and arrive to the same conclusion.  This function works with the original model we estimated previously (`LPM`), and conducts an identical procedure to that which we have done above "by hand".  Any difference in p-values is incidental, owing to different random draws.  

```{r}
library(fwildclusterboot)
boot <- boottest(object = LPM,
                 B = 999,
                 param = "treat2016",
                 clustid = "class_fe2")
paste0("The p-value with the user-written function is: ",
       round(boot$p_val, 3))
```

In principle, using such a library is likely the preferred way of conducting procedures such as the wild cluster bootstrap, however it is illustrative to see how it works in practice, as we do above.  A nice element of user-written procedures such as that of @Roodmanetal2019 is that it also seamlessly returns other quantities of interest which we would have to generate ourselves above, such as confidence interval, which we can see below:

```{r}
paste0("The confidence interval is: [", 
       round(boot$conf_int[1], 3),
       ",", round(boot$conf_int[2], 3), "].")
```
These values correspond closely to the original 95% CIs reported in the paper of [-0.015; 0.160].


Finally as a comparative exercise we may be interested in seeing how this procedure compares to a standard clustered bootstrap.  While there are many ways we could do this -- including quite easily by hand -- we examine this below using the `ClusterBootstrap` library.  It turns out that while the 95% CI on `treat2016` coming from clustered bootstrap is narrower than the 95% CI from the wild cluster bootstrap (as expected), the difference is not *so* substantial in this particular case. 

```{r}
library(ClusterBootstrap)
set.seed(121316)
boot2 <- clusbootglm(model = econmajor ~ yr_2016 + treatment_class +
                     treat2016 + female_prof + instate + freshman +
                     american + ACumGPA + gradePrinciples +
                     small_class, data = data[data$female == 1,],
                     clusterid = class_fe2,
                     B = 1000)
boot2$percentile.interval
```

## Code call-out 4.2: Exploring the Two-way Fixed Effect Model and Parameter Decompositions

**Two-Way Fixed Effects Estimators and Heterogeneous Treatment Effects** To understand the potential issues related to heterogeneous treatment effects over time and two-way fixed effect estimators, we will examine a pair of numerical examples. In particular, we will focus on the composition of the two way FE estimator $\tau$ estimated from: $$
y_{st} = \gamma_s + \lambda_t + \tau w_{st} + \varepsilon_{st}
$$ {#eq-twfe} where $y_{st}$ is the outcome variable, $\gamma_s$ and $\lambda_t$ are state (unit) and time fixed effects, $w_{st}$ is the binary treatment variable that takes the value of 1 if a state (unit) $s$ is treated at time $t$ and otherwise takes 0. We will work with a quite tractable example based on three units and 10 time periods, and will document how the approaches taken by @GoodmanBacon2018 and by @deChaisemartinDhaultfoeuille2019 to understand the two-way FE estimator compare.

The results from @GoodmanBacon2018 and those from @deChaisemartinDhaultfoeuille2019 are similar, however they take quite different paths to get there. Goodman-Bacon's (like that laid out in @AtheyImbens2018) is "mechanical" in that it is based on the underlying difference-in-differences comparisons between all groups. The result in @deChaisemartinDhaultfoeuille2019 is based on a potential outcomes frame-work, and counterfactuals under parallel trend assumptions. Thus to examine how these methods work requires somewhat different frameworks. In the case of @GoodmanBacon2018, we should consider all possible DD comparisons, while in the case of @deChaisemartinDhaultfoeuille2019 we should consider the treatment effect for each unit and time period, which requires knowing the observed and counterfactual state. While the approaches the two papers take to understand the content of the estimator differ, they refer to the same estimator, so always recover the same parameter estimate. To examine this in a more applied way, we will look at a simulated example.

To do this, let's consider a panel of 3 states/areas over the 10 years ($t$) of 2000 to 2009. One of these units is entirely untreated ($unit = 1$ or group $U$), one is treated at an early time period, 2003, ($unit = 2$ or group $k$), and the other is treated at a later time period, 2006, ($unit = 3$ or group $l$). We will construct a general structure for this data below:

```{r}
Data <- data.frame(unit = ceiling(1:30/10), year = rep(2000:2009, 3))
head(Data)
```

We will consider a simple-case where the actual data-generating process is known as: $$y_{unit,t} = 2 + 0.2 \times (t - 2000) + 1 \times unit + \beta_1 \times post \times unit + \beta_2 \times post \times unit \times (t - treat).$$ Here $unit$ refers to the unit number listed above (1, 2 or 3), $post$ indicates that a unit is receiving treatment in the relevant time period $t$, and $treat$ refers to the treatment period (2003 for unit 2, and 2006 for unit 3). Let's generate treatment, time to treatment, and post-treatment variables in `R`:

```{r}
Data$treat <- ifelse(Data$unit == 2, 2006, ifelse(Data$unit == 3, 2003, 0))
Data$time  <- ifelse(Data$treat == 0, 0, Data$year - Data$treat)
Data$post  <- ifelse(Data$time >= 0 & Data$treat != 0, 1, 0)
```

This specification allows for each unit to have its own fixed effect, given that $unit$ is multiplied by 1, and allows for a general time trend increasing by 0.2 units each period across the whole sample. These parameters are not so important, as what we care about are the treatment effects themselves. The impact of treatment comes from the units $\beta_1$ and $\beta_2$. The first of these, $\beta_1$, captures an immediate unit-specific jump when treatment is implemented which remains stable over time. The second of these, $\beta_2$, implies a trend break occurring *only* for the treated units once treatment comes into place. We will consider 2 cases below. In the first case $\beta_1 = 1$ and $\beta_2 = 0$ (a simple case with a constant treatment effect per unit):

```{r}
Data$y1 <- 2 + (Data$year - 2000) * 0.2 + 1 * Data$unit + 1 * Data$post * Data$unit + 
  0 * Data$post * Data$unit * (Data$time)
```

and in a second case $\beta_1 = 1$ and $\beta_2 = 0.45$. This is a more complex case in which there are heterogeneous treatment effects over time:

```{r}
Data$y2 <- 2 + (Data$year - 2000) * 0.2 + 1 * Data$unit + 1 * Data$post * Data$unit +
  0.45 * Data$post * Data$unit * (Data$time)
```

These two cases are plotted next where the line with empty circles refers to group $U$, the line with black filled circles refers to group $k$ and the line with squares refers to group $l$

```{r fig.width=10}
#| code-fold: true
#| code-summary: "Show the plot code"
library(ggplot2)
library(ggpubr)
p1 <- ggplot(data = Data, aes(x = year, y = y1, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5) +
  geom_point(aes(shape = as.factor(unit)), size = 2) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  scale_y_continuous(breaks = seq(from = 0, to = 12, by = 2),
                     labels = seq(from = 0, to = 12, by = 2),
                     limits = c(0,12)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
t1 <- ggplot() + geom_text(aes(x = 0, y = 0, label = "(a) Simple Decomposition")) +
  theme_void()
p2 <- ggplot(data = Data, aes(x = year, y = y2, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5) +
  geom_point(aes(shape = as.factor(unit)), size = 2) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
                     labels = seq(from = 0, to = 20, by = 5),
                     limits = c(0,20)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
t2 <- ggplot() + geom_text(aes(x = 0, y = 0, label = "(b) Decomposition with trends")) +
  theme_void()
ggarrange(plotlist = list(p1, p2, t1, t2), ncol = 2, nrow = 2, heights = c(0.9, 0.1))
```


```{r echo=F}
rm(p1, p2, t1, t2)
```

### The Two-way Fixed Effect Estimator

First we will estimate the parameter by two-way fixed effects regression. This will provide us with the parameter estimate that both @GoodmanBacon2018 and @deChaisemartinDhaultfoeuille2019 will construct in a piece-wise fashion. This is done relatively simply in `R`. We simply estimate @eq-twfe by linear regression using `lm` as laid out below:

```{r}
case1 <- lm(data = Data,
            formula = y1 ~ factor(unit) + factor(year) + post)
paste0("The parameter estimates by two-way fixed effects regression for the ",
       "case 1 is: ", case1$coefficients["post"])
case2 <- lm(data = Data,
            formula = y2 ~ factor(unit) + factor(year) + post)
paste0("The parameter estimates by two-way fixed effects regression for the ",
       "case 2 is: ", case2$coefficients["post"])
```

Here we see that the coefficient of interest is 2.454545. We can see that this is between the two unit-specific jumps that occur with treatment (2 and 3). We will see below why it takes this particular weighted average.

### @GoodmanBacon2018 Decomposition

Using the values simulated above, let's see how the @GoodmanBacon2018 decomposition allows us to understand estimated treatment effects. We will consider both:\
- (a) Simple Decomposition\
- (b) Decomposition with trends

The methodology @GoodmanBacon2018 decomposition suggests that we should calculate all $2 \times 2$ combinations of states and time where post-treatment units are compared to "untreated" unit (laid out at more length in the book). In this example, this provides four specific effects, which contribute to $\widehat{\tau}$ as a weighted mean. The specific effects desired are:

-   A. $\widehat{\beta}^{2\times2}_{kU}$ from the comparison of the early treated unit with the untreated unit.\
-   B. $\widehat{\beta}^{2\times2}_{lU}$, from the comparison of the latter treated unit with the untreated unit.\
-   C. $\widehat{\beta}^{2\times2,k}_{kl}$, from the comparison of the early and latter treated units, when the early unit begin to be treated.\
-   D. $\widehat{\beta}^{2\times2,l}_{kl}$, from the comparison of the early and latter treated units, when the latter unit begin to be treated.

These will then be weighted as laid out in @GoodmanBacon2018 to provide the regression-based estimate.

#### (a) Simple Decomposition

In this case the @GoodmanBacon2018 methodology estimate $\widehat{\tau}$ weighting the next four DD comparisons

```{r}
#| code-fold: true
#| code-summary: "Show the plot code"
library(dplyr)
p1 <- ggplot(data = Data, aes(x = year, y = y1, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(1,0.1,1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  scale_y_continuous(breaks = seq(from = 0, to = 12, by = 2),
                     labels = seq(from = 0, to = 12, by = 2),
                     limits = c(0,12)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
p2 <- ggplot(data = Data, aes(x = year, y = y1, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(1,1,0.1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  scale_y_continuous(breaks = seq(from = 0, to = 12, by = 2),
                     labels = seq(from = 0, to = 12, by = 2),
                     limits = c(0,12)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
p3 <- Data %>% filter(year < 2006) %>%
  ggplot(aes(x = year, y = y1, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(0.1,1,1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2),
                     limits = c(2000,2009)) +
  scale_y_continuous(breaks = seq(from = 0, to = 12, by = 2),
                     labels = seq(from = 0, to = 12, by = 2),
                     limits = c(0,12)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
p4 <- Data %>% filter(year >= 2003) %>%
  ggplot(aes(x = year, y = y1, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(0.1,1,1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2),
                     limits = c(2000,2009)) +
  scale_y_continuous(breaks = seq(from = 0, to = 12, by = 2),
                     labels = seq(from = 0, to = 12, by = 2),
                     limits = c(0,12)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
t1 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "A. Early Group v/s Untreated Group"), size = 3) +
  theme_void()
t2 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "B. Later Group v/s Untreated Group"), size = 3) +
  theme_void()
t3 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "C. Early Group v/s Later Group Before 2006"), 
            size = 3) +
  theme_void()
t4 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "D. Early Group v/s Later Group After 2003"), 
            size = 3) +
  theme_void()
ggarrange(plotlist = list(t1, t2, p1, p2, t3, t4, p3, p4), ncol = 2, nrow = 4, 
          heights = c(0.1, 0.4, 0.1, 0.4))
```

```{r echo=FALSE}
rm(p1, p2, p3, p4, t1, t2, t3, t4)
```

As seen in the plots, in the simple decomposition these effects are constants of 3 and 2 for early and later treated units given that the "treatment effect" is simply $1 \times unit$ in each case.

##### A. Early Group v/s Untreated Group

In order to calculate the effects we start making the simple DD comparison of the untreated group $U$ ($unit = 1$) with the early treated group $k$ ($unit = 3$) getting $\widehat{\beta}^{2 \times 2}_{kU}$ as $$\widehat{\beta}^{2 \times 2}_{kU} = \left( \overline{y}_k^{Post(k)} - \overline{y}_k^{Pre(k)} \right) - \left( \overline{y}_U^{Post(k)} - \overline{y}_U^{Pre(k)} \right)$$ Where $\overline{y}_k^{Post(k)}$ is the mean of the outcome variable for the early treated group $k$ ($unit = 3$) posterior to treatment, from 2003, $\overline{y}_k^{Pre(k)}$ is the mean for of the outcome variable for the early treated group $U$ ($unit = 3$) prior to treatment, (up until 2002), and $\overline{y}_U^{Post(k)}, \overline{y}_U^{Post(k)}$ are the analogous quantities for the untreated group $U$ ($unit = 1$)

```{r}
(mean(Data$y1[Data$unit == 3 & Data$post == 1]) -
   mean(Data$y1[Data$unit == 3 & Data$post == 0])) -
  (mean(Data$y1[Data$unit == 1 & Data$year >= 2003]) -
     mean(Data$y1[Data$unit == 1 & Data$year < 2003]))
```

This result also can be obtained from the linear regression with the canonical DD formula $$y_{unit,t} = \alpha_0 + \alpha_1 \times Post(k) + \alpha_2 \times \mathbf{1}(unit = 3) + \beta_{kU}^{2\times2} \times Post(k) \times \mathbf{1}(unit = 3) + \varepsilon_i$$ Where $Post(k)$ indicates that the year is equal or greater than the year where the group $k$ ($unit = 3$) received the treatment (2003) and $\mathbf{1}(unit = 3)$ indicates if the observation is from the early treated group $k$ ($unit = 3$)

```{r}
summary(lm(y1 ~ factor(year >= 2003) + factor(unit) + factor(year >= 2003):factor(unit), 
           data = Data, subset = (unit != 2)))
```

A third way to obtain this is from the next linear regression $$y_{unit,t} = \alpha_0 + \beta_{kU}^{2 \times 2} \times Post + \sum_{i = 2001}^{2009} \alpha_{i-2000} \times \mathbf{1}(year = i) + \alpha_{10} \times \mathbf{1}(unit = 3) + \varepsilon_i$$ Where in this case $Post$ indicates if the unit is treated (note for group $U$ this will be always 0), $\mathbf{1}(year = i)$ indicates if the observation is in period $i \in \{2001, \ldots, 2009\}$ and $\mathbf{1}(unit = 3)$ keep its meaning

```{r}
summary(lm(y1 ~ post + factor(year) + factor(unit), data = Data, subset = (unit != 2)))
```

Now we store this result for posterior use

```{r}
bku <- lm(y1 ~ post + factor(year) + factor(unit), data = Data,
          subset = (unit != 2))$coefficient["post"]
```

##### B. Later Group v/s Untreated Group

The next DD comparison we calculate is that which compares the later treated group $l$ ($unit = 2$) with the untreated group $U$ ($unit = 1$), resulting in $\widehat{\beta}^{2 \times 2}_{lU}$. As above, we can generate this DD estimate in a number of ways (most simply by double-differencing with means), and this will then be stored.

```{r}
blu <- lm(y1 ~ post + factor(year) + factor(unit), data = Data, 
   subset = (unit != 3))$coefficient["post"]
blu
(mean(Data$y1[Data$unit == 2 & Data$post == 1]) -
   mean(Data$y1[Data$unit == 2 & Data$post == 0])) -
  (mean(Data$y1[Data$unit == 1 & Data$year >= 2006]) -
     mean(Data$y1[Data$unit == 1 & Data$year < 2006]))
summary(lm(y1 ~ factor(year >= 2006) + factor(unit) + factor(year >= 2006):factor(unit), 
           data = Data, subset = (unit != 3)))
```

##### C. Early Group v/s Later Group Before 2006

Next we calculate the effects from the DD comparisons of early and later treated groups, up until the later treated group receives treatment (2006). This is: $$\widehat{\beta}^{2 \times 2, k}_{kl} \equiv \left( \overline{y}^{Mid(k,l)}_{k} - \overline{y}^{Pre(k)}_{k} \right) - \left( \overline{y}^{Mid(k,l)}_{l} - \overline{y}^{Pre(k)}_{l} \right)$$ where $\overline{y}^{Mid(k,l)}_{k}$ is the mean of the outcome variable for the early treated group $k$ ($unit = 3$) in the period between the treatment for the group $k$ and the group $l$ ($unit = 2$), from 2003 to 2005, $\overline{y}^{Pre(k)}_{k}$ is the mean for of the outcome variable for the early treated group $k$ ($unit = 3$) previous to treatment, until 2002, and $\overline{y}^{Mid(k,l)}_{l}, \overline{y}^{Pre(k)}_{l}$ are the analogous for the later treated group $l$ ($unit = 2$)

```{r}
bklk <- lm(y1 ~ post + factor(year) + factor(unit), data = Data,
   subset = (unit != 1 & year < 2006))$coefficient["post"]
bklk
(mean(Data$y1[Data$unit == 3 & (Data$year >= 2003 & Data$year < 2006)]) -
   mean(Data$y1[Data$unit == 3 & Data$year < 2003])) -
  (mean(Data$y1[Data$unit == 2 & (Data$year >= 2003 & Data$year < 2006)]) -
     mean(Data$y1[Data$unit == 2 & Data$year < 2003]))
summary(lm(y1 ~ factor(year >= 2003) + factor(unit) + factor(year >= 2003):factor(unit), 
           data = Data, subset = (unit != 1 & year < 2006)))
```

##### D. Early Group v/s Later Group After 2003

The last DD comparison is for early and later treated groups, starting from 2006 $$\widehat{\beta}^{2 \times 2, l}_{kl} \equiv \left( \overline{y}^{Post(l)}_{l} - \overline{y}^{Mid(k,l)}_{l} \right) - \left( \overline{y}^{Post(l)}_{k} - \overline{y}^{Mid(k,l)}_{k} \right)$$ Where $\overline{y}^{Post(l)}_{l}$ is the mean of the outcome variable for the later treated group $l$ ($unit = 2$) in the period after this group received the treatment, from 2006, $\overline{y}^{Mid(k,l)}_{l}$ is the mean for of the outcome variable for the later treated group $l$ ($unit = 2$) in the period between the treatment for the group $k$ ($unit = 3$) and the group $l$, from 2003 to 2005, and $\overline{y}^{Post(l)}_{k}, \overline{y}^{Mid(k,l)}_{k}$ are the analogous quantities for the early treated group $k$ ($unit = 3$). We can generate and save this quantity as we have previously:

```{r}
bkll <- lm(y1 ~ post + factor(year) + factor(unit), data = Data,
   subset = (unit != 1 & year > 2002))$coefficient["post"]
bkll
(mean(Data$y1[Data$unit == 2 & Data$year > 2005]) -
   mean(Data$y1[Data$unit == 2 & (Data$year >= 2003 & Data$year < 2006)])) -
  (mean(Data$y1[Data$unit == 3 & Data$year > 2005]) -
     mean(Data$y1[Data$unit == 3 & (Data$year >= 2003 & Data$year < 2006)]))
summary(lm(y1 ~ factor(year >= 2006) + factor(unit) + factor(year >= 2006):factor(unit==2), 
           data = Data, subset = (unit != 1 & year > 2002)))
```

This comparison is the comparison which can potentially result in undesired results if treatment effects are dynamic over time because it views group 3 (the previously treated group) as a control. However, in this case, given that treatment effects are homogenous over time we do not have a major problem here, and we observe that $\widehat{\beta}^{2 \times 2, l}_{kl}=2$.

##### Weights

We can now arrive to the OLS estimate of this two-way fixed effect model by generating the weighted mean of the previous estimates as: $$\widehat{\tau} = W_{kU} \cdot \widehat{\beta}^{2\times 2}_{kU} + W_{lU} \cdot \widehat{\beta}^{2\times 2}_{lU} + W_{kl}^{k} \cdot \widehat{\beta}^{2\times 2,k}_{kl} + W_{kl}^{l} \cdot \widehat{\beta}^{2\times 2,l}_{kl}$$ Where each $W$ is the weight that the respective $\beta$ has in this weighted mean, specifically: \begin{align*} 
W_{kU} & = \frac{(n_k + n_U)^2\widehat{V}^D_{kU}}{\widehat{V}^D} \quad &  \quad W_{lU} & = \frac{(n_l + n_U)^2\widehat{V}^D_{lU}}{\widehat{V}^D} \\ 
W_{kl}^k & = \frac{[(n_k + n_l)(1 - \overline{D}_l)]^2\widehat{V}^{D,k}_{kl}}{\widehat{V}^D} \quad &  \quad W_{kl}^l & = \frac{[(n_k + n_l)(1 - \overline{D}_k)]^2\widehat{V}^{D,l}_{kl}}{\widehat{V}^D}
\end{align*} Where $n$ refers to the sample share of the group

```{r}
nk = 1/3
nl = 1/3
nu = 1/3
```

$\overline{D}$ referes to the share of time the group is treated

```{r}
Dk = mean(Data$post[Data$unit==3])
Dl = mean(Data$post[Data$unit==2])
```

and $\widehat{V}$ refers to how much treatment varies

```{r}
VkU = 0.5*0.5*(Dk)*(1-Dk)
VlU = 0.5*0.5*(Dl)*(1-Dl) 
Vklk = 0.5*0.5*((Dk-Dl)/(1-Dl))*((1-Dk)/(1-Dl))
Vkll = 0.5*0.5*(Dl/Dk)*((Dk-Dl)/(Dk))
VD   = sum(lm(post ~ factor(unit) + factor(year), 
              data = Data)$residuals^2)/30
```

The weights are thus the following:

```{r}
wkU = ((nk + nu)^2*VkU)/VD
wkU
wlU = ((nl + nu)^2*VlU)/VD
wlU
wklk = (((nk + nl)*(1-Dl))^2*Vklk)/VD
wklk
wkll = (((nk + nl)*Dk)^2*Vkll)/VD
wkll
```

With this in mind the $\tau$ estimate is

```{r}
tau = wkU * bku + wlU * blu + wklk * bklk + wkll * bkll
tau
```

as observed in the two-way fixed effect estimate above.

#### (b) Decomposition with trends

In this case the @GoodmanBacon2018 decomposition follows as above generating the treatment effect as follows:

```{r}
#| code-fold: true
#| code-summary: "Show the plot code"
library(dplyr)
p1 <- ggplot(data = Data, aes(x = year, y = y2, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(1,0.1,1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
                     labels = seq(from = 0, to = 20, by = 5),
                     limits = c(0,20)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
p2 <- ggplot(data = Data, aes(x = year, y = y2, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(1,1,0.1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
                     labels = seq(from = 0, to = 20, by = 5),
                     limits = c(0,20)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
p3 <- Data %>% filter(year < 2006) %>%
  ggplot(aes(x = year, y = y2, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(0.1,1,1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2),
                     limits = c(2000,2009)) +
  scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
                     labels = seq(from = 0, to = 20, by = 5),
                     limits = c(0,20)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
p4 <- Data %>% filter(year >= 2003) %>%
  ggplot(aes(x = year, y = y2, color = as.factor(unit))) +
  geom_line(linetype = 1, size = 0.5, aes(alpha = as.factor(unit))) +
  geom_point(aes(shape = as.factor(unit), alpha = as.factor(unit)), size = 2) +
  scale_alpha_manual(values = c(0.1,1,1)) +
  scale_shape_manual(values = c(1, 16, 12)) +
  scale_color_manual(values = c("black", "black", "black")) +
  labs(x = "Time", y = "Outcome Variable") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2),
                     limits = c(2000,2009)) +
  scale_y_continuous(breaks = seq(from = 0, to = 20, by = 5),
                     labels = seq(from = 0, to = 20, by = 5),
                     limits = c(0,20)) +
  geom_vline(xintercept = 2002, color = "red", linetype = 2) +
  geom_vline(xintercept = 2005, color = "red", linetype = 2) +
  theme(legend.position = "none")
t1 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "A. Early Group v/s Untreated Group"), size = 3) +
  theme_void()
t2 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "B. Later Group v/s Untreated Group"), size = 3) +
  theme_void()
t3 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "C. Early Group v/s Later Group Before 2006"), 
            size = 3) +
  theme_void()
t4 <- ggplot() + 
  geom_text(aes(x = 0, y = 0, label = "D. Early Group v/s Later Group After 2003"), 
            size = 3) +
  theme_void()
ggarrange(plotlist = list(t1, t2, p1, p2, t3, t4, p3, p4), ncol = 2, nrow = 4, 
          heights = c(0.1, 0.4, 0.1, 0.4))
```

```{r echo=FALSE}
rm(p1, p2, p3, p4, t1, t2, t3, t4)
```

As seen in the plots, in the decomposition with trends these effects are no longer constants of 3 and 2 for early and later treated units given that the "treatment effect" is no longer simply $1 \times unit$ in each case.

```{r}
# 2X2 DD Regressions
A <- lm(y2 ~ post + factor(year) + factor(unit), data = Data, subset=(unit!=2))
B <- lm(y2 ~ post + factor(year) + factor(unit), data = Data, subset=(unit!=3))
C <- lm(y2 ~ post + factor(year) + factor(unit), data = Data, subset=(unit!=1 & year<2006))
D <- lm(y2 ~ post + factor(year) + factor(unit), data = Data, subset=(unit!=1 & year>2002))
# 2x2 Betas
bkUk <- A$coefficient["post"]
bkUl <- B$coefficient["post"]
bklk <- C$coefficient["post"]
bkll <- D$coefficient["post"]
bkll
# Share of time treated
Dk = mean(Data$post[Data$unit==3])
Dl = mean(Data$post[Data$unit==2])
# How much treatment varies
VkUk = 0.5*0.5*(Dk)*(1-Dk)
VkUl = 0.5*0.5*(Dl)*(1-Dl) 
Vklk = 0.5*0.5*((Dk-Dl)/(1-Dl))*((1-Dk)/(1-Dl))
Vkll = 0.5*0.5*(Dl/Dk)*((Dk-Dl)/(Dk))
VD <- sum(lm(post ~ factor(unit) + factor(year), data = Data)$residuals^2/30)
# Share of sample
nk   = 1/3
nl   = 1/3
nu   = 1/3
# Weights
wkUk = ((nk + nu)^2*VkUk)/VD
wkUl = ((nl + nu)^2*VkUl)/VD
wklk = (((nk + nl)*(1-Dl))^2*Vklk)/VD
wkll = (((nk + nl)*Dk)^2*Vkll)/VD
# Tau
tau = bkUk*wkUk + bkUl*wkUl + bklk*wklk + bkll*wkll
tau
```

What is noteworthy here is the surprising behaviour flagged by @GoodmanBacon2018 for the final comparison based on the case where the earlier treated unit (unit 3) is used as a control for the later trated unit (unit 2). In this case, given that there *are* time-varying treatment effects, despite the fact that each unit-specific treatment effect is positive, we observe that the parameter $\widehat{\beta}^{2 \times 2, l}_{kl}$ is actually *negative*. In this particular example this negative value (-1.375) is not sufficient to turn the weighted treatment effect estimate negative, but if you play around with the size of the parameters $\beta_1$ and $\beta_2$ above, you will see that large enough differences in trends *can* result in such estimates! Here, as above, we see that when we aggregate unit-specific estimates as `tau`, the estimate (by definition) agrees with the estimate generated by two-way fixed effect models previously.

### @deChaisemartinDhaultfoeuille2019's Procedure
Now, we will show that the procedures described in @deChaisemartinDhaultfoeuille2019, despite arriving to the estimator in a different way, also let us understand how the regression weights the two-way fixed effect estimator.  In this case, rather than considering each treatment-control comparison pair, the authors note that the two-way fixed estimator can be conceived as a weighted sum of each single group by time period in any post-treatment group.

The authors define $\widehat{\beta}_{fe}$ as the coefficient estimated in the following (standard) two-way fixed effects regression: $$y_{i,s,t} = \beta_0 + \beta_{fe} D_{s,t} + \mu_s + \lambda_t + \varepsilon_{s,t}$$ Where $D_{s,t}$ is the mean over $i$ of a binary indicator variable that takes value of 1 if the unit $i$ in state $s$ is treated at period $t$ and 0 otherwise, in our case as we have one observartion per state $D_{s,t} = post_{s,t}$, meanwhile $\mu_s$ and $\lambda_t$ are state and time fixed effects. This is, of course, precisely the same model as we have estimated in @eq-twfe, implying that $\beta_{fe}=2.4545$ in cases without post-treatment trends (`y1`), or $\beta_{fe}=3.8045$ in cases with post-treatment dynamics (`y2`).

@deChaisemartinDhaultfoeuille2019 define the ATE for any ($s,t$) cell as: $$\Delta_{s,t} = \frac{1}{N_{s,t}} \sum_{i = 1}^{N_{s,t}}[Y_{i,s,t}(1) - Y_{i,s,t}(0)].$$  You will note that here we require an unobserved counterfactual $Y_{i,s,t}(0)$.  If we impose a parallel trend assumption, such a counterfactual can be inferred from unit-specific fixed effects, time-specific fixed effects, and the constant term.  Because in this case we *know* our data generating process, we can simply generate this counterfactual as the data generating process, absent any effect of treatment.  Below we generate such a counterfactual, where you will note that we impose that this is an 'untreated' counterfactual by setting the treatment effects to 0 in the generation of `y1_c` below:
```{r}
Data$y1_c <- 2 + (Data$year - 2000) * 0.2 + 1 * Data$unit + 0 * Data$post * Data$unit + 
  0 * Data$post * Data$unit * (Data$time)
```

It is likely useful to confirm to ourselves that graphically we are indeed generating the untreated counterfactual in this way.

```{r fig.width=10}
p1 <- ggplot(data = subset(Data, unit==2), aes(x = year)) +
      geom_line(aes(y = y1), color = "blue", size = 1.5) +
      geom_line(aes(y = y1_c), color = "red", linetype = "dashed", size = 1.5) +
      labs(x = "Year", y = "Y") + 
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  annotate(geom = "text", x = 2008, y = 5, label = "Y(0)") +
  annotate(geom = "text", x = 2008, y = 7, label = "Y(1)")
t1 <- ggplot() + geom_text(aes(x = 0, y = 0, label = "(a) Unit 2 Outcome and Counterfactual")) +
  theme_void()
p2 <- ggplot(data = subset(Data, unit==3), aes(x = year)) +
      geom_line(aes(y = y1), color = "blue", size = 1.5) +
      geom_line(aes(y = y1_c), color = "red", linetype = "dashed", size = 1.5) +
      labs(x = "Year", y = "Y") +
  scale_x_continuous(breaks = seq(from = 2000, to = 2009, by = 2)) +
  annotate(geom = "text", x = 2008, y = 9, label = "Y(1)") +
  annotate(geom = "text", x = 2008, y = 6, label = "Y(0)")
t2 <- ggplot() + geom_text(aes(x = 0, y = 0, label = "(b) Unit 3 Outcome and Counterfactual")) +
  theme_void()
ggarrange(plotlist = list(p1, p2, t1, t2), ncol = 2, nrow = 2, heights = c(0.9, 0.1))
```

This allows us to calculate a state- and time-period specific treatment effect ($\Delta_{s,t}$) for each treated unit.  We do so, calculating this quantity for all units in which treatment exists:

```{r}
Data$Delta_st[Data$post == 1] = Data$y1[Data$post == 1] - Data$y1_c[Data$post == 1]
print(Data[Data$post==1, c("y1", "y1_c", "unit", "year", "Delta_st")])
```

Unsurprisingly, given the data generating process we have defined, we see that each treatment effect is 2 for unit 2, and 3 for unit 3. If we were to calculate a mean treatment effect by hand, we may wish to simply take an average over all periods and units.  However, one of the key results of @deChaisemartinDhaultfoeuille2019 is to show that under a series of standard assumptions $$\beta_{fe} = E \left[ \sum_{s,t:D_{s,t}=1}\frac{N_{s,t}}{N_1}w_{s,t}\Delta_{s,t} \right]$$ Where $N_1$ refers to the sum of all treated observations and $$w_{s,t} = \frac{\varepsilon_{s,t}}{\sum_{s,t:D_{s,t}=1}\frac{N_{s,t}}{N_1}\varepsilon_{s,t}}$$ Where $\varepsilon_{s,t}$ is the residual from a regression of $D_{s,t}$ on state and time fixed-effects.  To confirm this in our data, we will estimate these regression residuals and add them into the dataframe:

```{r}
auxreg <- lm(post ~ factor(unit) + factor(year), data = Data)
Data$eps_st = auxreg$residuals
Data$eps_st[Data$post != 1] = NA
Data$w_st = Data$eps_st / sum(Data$eps_st, na.rm = T)
print(round(Data[Data$post==1, c("y1", "y1_c", "unit", "year", "Delta_st","w_st")],digits=15))
```
Note here that after generating $w_{s,t}$ we print this out using the round function to avoid very small digits appearing which are only different to zero given machine precision.  The key thing that we can see is that the effective weighting of treatment effects which occurs in regression is quite different to what we would expect.  Indeed, four periods are given 0 weights!  Finally, we can confirm that this decomposition gives us the two-way fixed effect estimate by multiplying $\Delta_{s,t}$ and $w_{s,t}$ and summing:


```{r}
print(paste0("de Chaisemartin and Xavier D'Haultfoeuille's decomposition ",
             "returns an estimates of: ", 
             sum(Data$Delta_st*Data$w_st, na.rm = T)))
```
We can see that correctly, this decomposition also returns the two-way fixed effect estimate of 2.4545.


We can follow precisely the same series of steps to see the case of the decomposition where treatment exposition also results in a trend-break.  To see this, we conduct each of the above steps below, however here we have not produced similar graphs (though you may wish to do so to confirm that counterfactuals make sense):

```{r}
Data$y2_c <- 2 + (Data$year - 2000) * 0.2 + 1 * Data$unit + 0 * Data$post * Data$unit + 
  0 * Data$post * Data$unit * (Data$time)
Data$Delta_st2[Data$post == 1] = Data$y2[Data$post == 1] - Data$y2_c[Data$post == 1]
print(round(Data[Data$post==1, c("y2", "y2_c", "unit", "year", "Delta_st2","w_st")],digits=15))
```

Because there is no difference in the structure of the treatment indicator or the unit and time fixed effects, the residuals $w_{s,t}$ are identical, though of course the treatment effects themselves, $\Delta_{s,t}$ are not.  Thus, once again we see that later treatment effects for unit 3 (precisely those units for which treatment effects are largest), are given zero weights.  Finally, again we can calculate the two-way fixed effect estimate following this decomposition by summing across units, capturing the estimate we have previously observed in regression models of 3.804545.  

```{r}
print(paste0("de Chaisemartin and Xavier D'Haultfoeuille's decomposition ",
             "returns an estimates of: ", 
             sum(Data$Delta_st2*Data$w_st, na.rm = T)))
```

Depending on the nature of treatment assignment, ie the number of treated periods, as well as the period in which treatment is adopted in different units, these weights will vary, and can even be negative.  You may wish to explore alternative set-ups and confirm to yourself that this is the case, and see that regardless of the nature of the setting, both @GoodmanBacon2018 and @deChaisemartinDhaultfoeuille2019's decompositions recover the two-way fixed effect estimate.

## Code call-out 4.3: Event study and Interaction-weighted Estimators

To understand the equivalence between the panel event study model described in Section 4.4.2.1 of the book and the "Interaction-weighted (IW) estimator" proposed by @AbrahamSun2018 we work with data from @StevensonWolfers2006 which examines the effect of the staggered adoption of no-default divorce reforms (`X_nfd`) and female suicide (`asmrs`) in United States for 49 states (`stfips`) from 1964 to 1996.  We begin by loading the data below, and confirming that it effectively consists of a balanced sample of 49 states (we will denote using $s$ below) over 33 years (denoted as $t$):

```{r}
data <- read.csv(file = "Datasets/StevensonWolfers2006.csv")
nrow(data)
head(data)
```

In order to prepare our dataset we note that the variable `X_nfd` contains the year a state adopts a law ($Event_s$), and define a variable `timeToTreat` as the difference between year $t$  and $Event_s$:

```{r}
data$timeToTreat <- data$year - data$X_nfd
head(data[, c('year', 'X_nfd', 'timeToTreat')], 10)
```

Because `X_nfd' is missing for states which did not pass a no fault divorce law in the period under study, this variable thus captures leads (periods prior to treatment) and lags (periods post treatment) for states which have adopted a no fault divorce law.

### Panel Event Study Model
We will begin by estimating a standard event study, defined as follows, or as equation XXXX in the book:
$$asmrs_{st} = \alpha + \sum_{j=2}^{J} \beta_j (Lead \ j)_{st} + \sum_{k = 0}^{K} \gamma_{k} (Lag \ k)_{st} + \mu_s + \lambda_t + X_{st}^\prime \Gamma + \varepsilon_{st}$$
Here $asmrs_{st}$ refers to the female suicide rate for all women of state $s$ at period $t$, $(Lead \ j)_{st}$ a dummy variable that takes 1 if the state $s$ at period $t$ is $j$ periods pre-treatment, $(Lag \ k)_{st}$ a dummy variable that takes 1 if the state $s$ at period $t$ is $k$ periods post-treatment, $\mu_s$ and $\lambda_t$ are state and time fixed effects respectively and $X^\prime_{st}$ a vector of covariates for state $s$ at period $t$ such as per-capita income $pcinc_{st}$, homicide mortality $asmrh_{st}$ and the aid to families with dependent children (AFDC) rate for a family of four $cases_{st}$. 

Thus, we wish to include a single binary variable for each lead and lag observed in our data (arbritarily omitting lead 1). If we inspect the values of `timeToTreat` below, we can see how there are $J = 21$ binary $Lead$ variables and $K = 27$ $Lag$ variable to include:

```{r}
unique(data$timeToTreat)
```

A natural option to generate lags and leads may seem to be to convert the numeric variable `timeToTreat` into a factor variable and use `C()` in the `lm` function when estimating OLS to automatically create all required binary variables.  However, an issue will arise in this case given the missing (`NA`) values in `timeToTreat` from those states that never receive treatment, as this missingness would be inherited by the regression model.  One possible solution is to manually create all the binary variables as below, looping through each level of `timeToTreat`.  The resulting set of lags and leads will take a value of 1 if `timeToTreat` is equal to the period of interest, and 0 otherwise.  While we could likely do this in fewer lines, it is useful to see explicitly how lags and leads are coded.

```{r}
for (i in sort(unique(data$timeToTreat))) {
  if(is.na(i)){
    next
  } else if(i < 0){
    data[, paste0('Lead', abs(i))] <- ifelse((!is.na(data$timeToTreat)) & 
                                          (data$timeToTreat == i), 1, 0)
  } else{
    data[, paste0('Lag', i)] <- ifelse((!is.na(data$timeToTreat)) & 
                                          (data$timeToTreat == i), 1, 0)
  }
}
```

Next we can estimate the event study by standard OLS using the `felm` function from the `lfe` package.  Note that we omit `Lead1` as a reference base level.  The usage of this function includes a four-part formula where the first part is a conventional formula as in `lm`, the second part is our variables that determine the fixed effects (in this case year and state fixed effects), the third part is for an IV formula and the last part is a variable to use if clustered standard errors are desired. As we are not estimating with IV we indicate 0 in the IV portion of the formula. Here we cluster standard errors by state, and in this example we indicate `cmethod = "reghdfe"`, which ensures that identical degree of freedom corrections are used as in Stata's `reghdfe` package's cluster-robust standard errors.  In this particular case, standard errors will be identical if such an option is not indicated, as no fixed effects are multicolinear.

```{r}
library(lfe)
EventStudy <- felm(data = data,
                   formula = asmrs ~ Lead21 + Lead20 + Lead19 + Lead18 + Lead17 + 
                   Lead16 + Lead15 + Lead14 + Lead13 + Lead12 + Lead11 + Lead10 + 
                   Lead9 + Lead8 + Lead7 + Lead6 + Lead5 + Lead4 + Lead3 + Lead2 +
                   Lag0 + Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Lag6 + Lag7 +
                   Lag8 + Lag9 + Lag10 + Lag11 + Lag12 + Lag13 + Lag14 + Lag15 +
                   Lag16 + Lag17 + Lag18 + Lag19 + Lag20 + Lag21 + Lag22 + Lag23 +
                   Lag24 + Lag25 + Lag26 + Lag27 + pcinc + asmrh + cases | 
                     year + stfips | 0 |stfips, cmethod = "reghdfe")
summary(EventStudy)
```

Once we have estimated this regression, we can visualise point estimates and standard errors in the traditional event study style, as laid out below.  To do this, we will "pre-populate" a data frame with all `NA` values, and then incorporate the parameters we need from our regression, which we saved as `EventStudy` above.  Finally, we will plot an event study using `ggplot2`, combinging `geom_point` for point estimates, and `geom_errorbar` for confidence intervals:

```{r}
params <- summary(EventStudy)$coefficients
# Create df
plot_df <- data.frame(Time = -21:27, Estimate = NA, SE = NA)
# Assign values
plot_df[plot_df$Time < -1, c('Estimate', 'SE')] <- params[1:20, c('Estimate',
                                                                  'Cluster s.e.')]
plot_df[plot_df$Time > -1, c('Estimate', 'SE')] <- params[21:48, c('Estimate',
                                                                  'Cluster s.e.')]
plot_df[plot_df$Time == -1, c('Estimate', 'SE')] <- 0 
# Graph
library(ggplot2)
ggplot(data = plot_df) + geom_point(aes(x = Time, y = Estimate)) +
  geom_errorbar(aes(ymin = Estimate - 1.96 * SE, ymax = Estimate + 1.96 * SE, 
                    x = Time)) + 
  geom_hline(yintercept = 0, color = 'red') + geom_vline(xintercept = -1) +
  scale_x_continuous(limits = c(-21, 27), breaks = seq(-20, 25, 5)) +
  scale_y_continuous(limits = c(-40, 40), breaks = seq(-40, 40, 20)) +
  labs(x = 'Time To Treatment', y = 'Suicide per 1m Woman')
```

In the figure we see, in general, relatively flat trends in the lead up to the event of interest, and thereafter a reduction in rates of female suicide following the passage of no fault divorce laws.  

### Interaction-weighted Estimator
To see how the interaction-weighted estimator proposed by @AbrahamSun2018 accounts for time-varying treatment adoption, we will generate it "by hand" here.   This estimator proposes to generate $\widehat{v}_g$ for some period $g$ of interest, where in this case $g$ will refer to each lag and lead. Formally, $\widehat{v}_g$ is defined as follows:
$$
  \widehat{v}_g = \frac{1}{|g|} \sum_{\ell \in g} \sum_{e} \widehat{\delta}_{e,\ell} \widehat{Pr} \left\{ E_i = e | E_i \in [-\ell , T - \ell] \right\}.
$$ {#eq-IWEstimator}
Here $E_i$ indicates the moment treatment is adopted for a unit $i$, and $\ell$ is the relative period to treatment at period $t$, ie $\ell = t - E_i$.  Thus, $\widehat{Pr} \left\{ E_i = e | E_i \in [-\ell , T - \ell] \right\}$ is the sample share of the cohort that receives the initial treatment at a time $e$, $g$ is a set of relative periods $\ell \in [-T , T]$, and $\widehat{\delta}_{e, \ell}$ is an estimate of the Cohort-specific Average Treatment effect on the Treated ($CATT$) for the cohort $e$ at $\ell$ periods from initial treatment $$\delta_{e,\ell} = CATT_{e, \ell} = E[Y_{i,e+\ell} - Y_{i,e+\ell}^{\infty} | E_i = e]$$ Where $Y_{i,t}$ is the outcome for unit $i$ at time $t$ and $Y_{i,t}^{\infty}$ is the potential outcome for unit $i$ at time $t$ if never were treated. @AbrahamSun2018 describe the estimation procedure of $\widehat{v}_g$ as follows:  

1. Estimate $CATT_{e,\ell}$ from a TWFE interacting relative periods indicators with cohort indicators, excluding indicators for cohorts from some set $C$^[In @AbrahamSun2018 you found a detailed explanation on how determinte the set $C$, for this example $C$ is the never treated units.]: $$Y_{i,t} = \alpha_i + \lambda_t + \sum_{e\neq C} \sum_{\ell \neq -1} \delta_{e, \ell} (\mathbf{1}\{ E_i = e\} \cdot D_{i,t}^{\ell}) + \varepsilon_{i,t}$$ Where $\alpha_i$ and $\lambda_t$ are the unit and time fixed effects, $\mathbf{1}\{E_i=e\}$ the cohort indicators and $D_{i,t}^{\ell}$ the relative period indicators, i.e, $D_{i,t}^{\ell} = 1$ if unit $i$ at time $t$ is $\ell$ periods from the treatment.  
2. Estimates the weights for each $\widehat{\delta}_{e,\ell}$: $\widehat{Pr} \left\{ E_i = e | E_i \in [-\ell , T - \ell] \right\}$ as the sample share of the cohort that receives the initial treatment at a time $e$ that has experienced the $\ell$ relative period to treatment.  
3. Estimate the IW estimator following equation (@eq-IWEstimator).

To fix ideas and get a hold on notation, in our example $g = \{-21 , -20 , \cdots , 27\}$, as we are considering the full set of lags and leads $\ell$ as part of $g$.  The years which a no fault divorce law was passed ($e$) are $e \in \{1969 , 1970 , 1971 , 1972 , 1973 , 1974 , 1975 , 1976 , 1977 , 1980 , 1984 , 1985\}$^[This can be seen by simply listing the set of adoption years, for example with: `sort(unique(data$X_nfd))`.]. We will start by building a series of indicator variables for $E_i$ as follows:

```{r}
for (i in sort(unique(data$X_nfd))) {
  data[, paste0('E_', i)] <- ifelse((!is.na(data$X_nfd))&(data$X_nfd == i), 1, 0)
}
```
You may wish to confirm each `E_1969` generated in this loop above contains a vector of 1s for all units which were first exposed to the policy in 1969, and so forth for other indicators.

If we return to (@eq-IWEstimator), we can see that we are interested in estimating a full set of lags and leads for each adoption period $e$.  With this particular setup, we have 12 indicator variables drawn from $e$, and if we consider all lags and leads in $g$, we have 48 indicator variables^[Excluding $\ell = -1$.]. Thus, from $\displaystyle\sum_{e\neq C}\sum_{\ell\neq-1}\delta_{e, \ell} (\mathbf{1}\{ E_i = e\} \cdot D_{i,t}^{\ell})$ we have 576 indicator variables! To ilustrate this we build three matrix: (i) Dummies for $g = \{-21 , -20 , \cdots , 27\}$, (ii) dummies for $e \in \{1969 , 1970 , 1971 , 1972 , 1973 , 1974 , 1975 , 1976 , 1977 , 1980 , 1984 , 1985\}$ and (iii) dummies for $CATT_{e,\ell}$.  At the end, we will also rename the column names of the last matrix in order to make it clearer when we go forward where we will store each of the outputs of interest.

```{r}
library(dplyr)

# Create matrices for timeToTreat and Cohort dummies
dummies_timeToTreat <- select(data, contains(c("Lead", "Lag")), -Lead1) %>% as.matrix()
dummies_Cohort <- select(data, contains("E_")) %>% as.matrix()

# Initialize dummies_CATT with the first cohort's interaction
dummies_CATT <- dummies_timeToTreat * dummies_Cohort[, 1]

# Loop through the rest of the cohorts and cbind the interaction results
for(i in 2:ncol(dummies_Cohort)) {
  dummies_CATT <- cbind(dummies_CATT, dummies_timeToTreat * dummies_Cohort[, i])
}

# Update column names of dummies_CATT
unique_groups <- sort(unique(data$X_nfd))
group_size <- ncol(dummies_timeToTreat)

for(aux in seq_along(unique_groups)) {
  g <- unique_groups[aux]
  col_indices <- (group_size * (aux - 1) + 1):(group_size * aux)
  colnames(dummies_CATT)[col_indices] <- paste0("E", g, "_", colnames(dummies_timeToTreat))
}
```
The matrix `dummies_timeToTreat` will consist of an indicator for each observation capturing whether it is at a particular time to treatment adoption.  Similarly, `dummies_Cohort` will consists of an indicator for whether or not an observation is part of each group $e$.  The interaction between these two matrices (`dummies_CATT`) will thus build an indicator for each cohort and time to treatment, indicating whether an observation is in this particular group.  Note, however, that some of the indicator variables in `dummies_CATT` will actually be entirely empty. This is because there are some cohorts that never experience some specific $\ell$ relative to the period of treatment (eg early treatment adopters won't have enough data prior to treatment to observe very long leads, and late treatment adopters won't have enough post-treatment data to observe very long lags).  In order to delete these indicators which exist in our matrix `dummies_CATT` but not in practice, we can simply remove from the matrix `dummies_CATT` those columns with 0 mean:

```{r}
dummies_CATT <- dummies_CATT[,colMeans(dummies_CATT) != 0]
ncol(dummies_CATT)
```
As we see here, we have now reduced the dimensionality of the indicator variables $\displaystyle\sum_{e\neq C}\sum_{\ell\neq-1}\delta_{e, \ell} (\mathbf{1}\{ E_i = e\} \cdot D_{i,t}^{\ell})$ from 576 to 384, which are the full observable lags and leads for each treatment cohort. Now we can actually go about the business of estimating $\delta_{e,\ell}$!

```{r}
CATT_el = felm(data = data, formula = asmrs ~ dummies_CATT + pcinc + asmrh + 
                 cases | year + stfips | 0 |
                 stfips, cmethod = "reghdfe")
```

This looks quite simple, and it is precisely because we have gone to all the work of generating all the dummies we need for our CATT groups.  This, in essence, estimates an event study equivalent for each treatment adoption cohort.  As there is many estimates here, we don't show the full summary, but we can peruse the first 10 estimates for $CATT_{e,\ell}$:

```{r}
CATT_el$coefficients[1:10,]
```

To have a full idea of what we've just estimated here, we will re-organise these estimates to present the coefficient in the style of Table 3 of @AbrahamSun2018.  In particular, let's display $\ell$ values (lags and leads) in rows and $e$ values in columns so we can observe our cohort-specific event studies in a column-wise fashion.  We do this below, we first build a matrix `deltas` in which to store these estimates, then fill them in, before finally displaying the tabular output.  Most of this code is actually relatively auxiliary, used to ensure that we can extract each lag and lead from regression results.  To do this, we are generating a function we call `fetch_coefficient`, as the coefficient we need may sometimes be named with `_Lag` in the variable, sometimes be named as `_Lead`, and sometimes not exist (and this may imply either that it is the base period -1, or that the lag or lead doesn't exist).  It is worth working through this function carefully to confirm that you can see that in this way we grab each coefficient $\widehat\delta_{e,\ell}$. 

```{r}
# Matrix to store delta_{e,l}
deltas <- matrix(data = NA, nrow = ncol(dummies_timeToTreat) + 1,
                 ncol = ncol(dummies_Cohort))
# Row and column names
rownames(deltas) <- c(paste0("Lead", 21:1), paste0("Lag", 0:27))
colnames(deltas) <- paste0("E", sort(unique(data$X_nfd)))

# Function to fetch coefficient safely
fetch_coefficient <- function(e, l) {
  if (l == -1) {
    return(0)
  } else if (l < -1) {
    Catt_searched <- paste0("dummies_CATTE", e, "_Lead", abs(l))
  } else {
    Catt_searched <- paste0("dummies_CATTE", e, "_Lag", l)
  }
  value <- tryCatch(
    CATT_el$coefficients[Catt_searched, 1],
    error = function(e) NA
  )
  return(value)
}

# Get unique cohorts and relative times
cohorts <- sort(unique(data$X_nfd))
relative_times <- -21:27

# Fill the deltas matrix
for (column in seq_along(cohorts)) {
   e <- cohorts[column]
   deltas[, column] <- sapply(relative_times, fetch_coefficient, e = e)
}

# Display the coefficients in a nice tabular output
library(kableExtra)
kbl(deltas, booktabs = T, digits = 2, linesep = "") %>% 
  kable_styling(font_size = 10, bootstrap_options = c("striped", "hover"), full_width = T)
```

Now, with $\widehat\delta_{e,\ell}$ in hand, the only other thing we need are the weights of each cohort at the respective relative period.  We could do this "by hand", calculating from observations in our data, but it is likely easier to get these by regressing each cohort indicator variable $\mathbf{1} \{ E_i = e \}$ on all the relative period indicator variables $D^\ell_{i,t}$. This regression will just tell us the proportion of a specific lead or lag which are made up of observations from a particular cohort.  We will do this below, storing weights in a matrix called `w1`:

```{r}
# Matrix to store results
w1 <- matrix(data = NA, ncol = ncol(dummies_Cohort), 
             nrow = ncol(dummies_timeToTreat)+1)
# Row and column names
rownames(w1) <- c(paste0("Lead", 21:1), paste0("Lag", 0:27))
colnames(w1) <- paste0("E", sort(unique(data$X_nfd)))
# Auxiliary column indicator
column <- 0
# For each cohort
for (e in sort(unique(data$X_nfd))) {
  # Add 1 to column indicator
  column = column + 1
  # Regress the cohort in indicated column on relative period dummies
  aux_model <- lm(dummies_Cohort[,column] ~ dummies_timeToTreat - 1)
  # Assign the estimated coefficients that are the weights
  w1[,column] <- c(aux_model$coefficients[1:20], 0, aux_model$coefficients[21:48])
  # Note those with 0 value really are relative periods for which the cohort doesn't
  # exist, so can be assignad as missing in order to follow Sun and Abraham Table 3
  w1[w1[,column] == 0,column] <- NA
}
# Now row 21 is the base period l = -1, replace it for 0s
w1[21,] <- 0
head(w1)
```

<!--
Now we proceed with the second way that is to manually count the units in each cohort and identify cohorts present in each relative period. We start by get the amount of observations for each cohort at each relative time period to treatment in order to identify which cohorts were present in each relative time period to treatment. Then we continue by obtaining the number of units at each cohort of our sample

```{r}
	# Identify cohorts present in each relative time period, if count > 0 the cohort
# is present
N_el = data %>% select(timeToTreat, X_nfd) %>% group_by(timeToTreat, X_nfd) %>%
  summarise(N_el = n()) %>% ungroup()
# Get the sample count of observations for each cohort
Ne = data %>% group_by(X_nfd) %>% summarise(Ne = n_distinct(stfips)) %>% 
  ungroup()
# Join this two datasets
Ns = N_el %>% left_join(Ne, by = "X_nfd") %>%
  rename(l = timeToTreat, e = X_nfd) %>% select(l, e, Ne)
head(Ns, 5)
```


Now we build matrix for the amount of units at each cohort for each relative period to treatment in order to after compute the weights. This matrix is build in a similar way that `deltas` object

```{r}
# Matrix to store weights
units <- matrix(data = NA, nrow = ncol(dummies_timeToTreat) + 1,
                ncol = ncol(dummies_Cohort))
# Row and column names
rownames(units) <- c(paste0("Lead", 21:1), paste0("Lag", 0:27))
colnames(units) <- paste0("E", sort(unique(data$X_nfd)))

# Function to fetch weights safely
fetch_weight <- function(e, l) {
  if (l == -1) {
     return(0)
  } else {
    W_searched <- Ns$l == l & Ns$e == e & !is.na(Ns$l) & !is.na(Ns$e)
    if (length(Ns$Ne[W_searched]) == 0) {
       return(NA)
    } else {
       return(Ns$Ne[W_searched])
    }
  }
}

# Get unique cohorts and relative times
cohorts <- sort(unique(data$X_nfd))
relative_times <- -21:27

# Fill the units matrix
for (column in seq_along(cohorts)) {
  e <- cohorts[column]
  units[, column] <- sapply(relative_times, fetch_weight, e = e)
}

# The matrix units is now filled
```
Now we build the weights for each $\widehat{\delta}_{e,\ell}$ as the share of cohort $e$ present in relative period $\ell$ and show that are (approximately) equal^[There may be some very small difference due to the method of estimation.] to the weights obtained in the regressions above

```{r}
w2 <- units / rowSums(units, na.rm = T)
w2[21, ] <- 0
w1[1:10, 1:10]
w2[1:10, 1:10]
```
-->

We can display these weights in the same was as we documented the quantities $\widehat\delta_{e,\ell}$ previously:

```{r}
ws <- w1
kbl(ws, booktabs = T, digits = 2, linesep = "") %>% 
  kable_styling(font_size = 10, bootstrap_options = c("striped", "hover"), full_width = T)
```

No, finally, we can generate $\widehat{v}_{\ell}$ for $\ell = -21, \ldots, 27$ and compare this with the results of the standard Panel Event Study Model we documented above.

```{r}
delta_l = rowSums(deltas * ws, na.rm = T)
coefs <- cbind(delta_l, c(EventStudy$coefficients[1:20], 0,
                          EventStudy$coefficients[21:48]))
colnames(coefs) <- c("IW", "Event Study")
kbl(list(coefs[1:21,], coefs[22:49,]), booktabs = T, digits = 2, linesep = "") %>% 
  kable_styling(font_size = 10, bootstrap_options = c("striped", "hover"), full_width = T)
```

Scanning across coefficients, we can see that in this case, reassuringly, almost every coefficient at least keeps its sign, except for a few cases that weren't statiscally significant in the Panel Event Study Model.  

If we wanted to implement Sun and Abraham's estimator entirely by hand we could, and all that is missing to do this is to generate standard errors to build the confidence intervals. Following @AbrahamSun2018 we note that the variance of $\widehat{v}_\ell$ can be written as follows^[This comes from the followingproperty: Let $X,Y$ be random variables and $a,b\in\mathbb{R}$, then $V(aX \pm bY) = a^2V(X) + b^2V(Y) \pm 2abCov(X,Y)$.]
\begin{align*}
  V \left( \widehat{v}_{\ell} \right) & = V \left( \sum_{e \in h^\ell} \widehat{Pr} \{ E_i = e | E_i \in h^\ell \} \cdot \widehat{\delta}_{e,\ell} \right) \\
  & = \sum_{e \in h^\ell} \left( \widehat{Pr}\{ E_i = e | e \in h^\ell \} \right)^2 V \left( \widehat{\delta}_{e,\ell} \right) \\
  & + \sum_{e_j \in h^\ell} \sum_{e_k \in h^\ell , e_k \neq e_j} 2 \widehat{Pr}\{ E_i = e_j | e_j \in h^\ell \} \widehat{Pr}\{ E_i = e_k | e_k \in h^\ell \} Cov \left( \widehat{\delta}_{e_j,\ell} , \widehat{\delta}_{e_k,\ell} \right) \\
  & + \sum_{e \in h^\ell} \left( \widehat{\delta}_{e,\ell} \right)^2 V \left( \widehat{Pr}\{ E_i = e | e \in h^\ell \} \right) \\
  & + \sum_{e_j \in h^\ell} \sum_{e_k \in h^\ell , e_k \neq e_j} 2 \widehat{\delta}_{e_j,\ell}  \widehat{\delta}_{e_k,\ell} Cov \left( \widehat{Pr}\{ E_i = e_j | e_j \in h^\ell \} , \widehat{Pr}\{ E_i = e_k | e_k \in h^\ell \} \right)
\end{align*}
Where $h^\ell$ is the set of cohorts that experience the relative period $\ell$, variance and covariance of the $CATT_{e,\ell}$ come from estimates of step 1 and, variance and covariance of the weights $\widehat{Pr} \{ E_i = e | e \in h^\ell \}$ come from the regressions of $\mathbf{1} \{ E_i = e \}$ on $D^\ell_{i,t}$. 

The key thing to see is that we could estimate this manually with the pieces we have already put together, and indeed, with the use of seemingly unrelated regression techniques it is possible to estimate the variance of $\widehat{Pr}(\cdot)$ and $\widehat\delta_{e\ell}$ in a single step.  However, in practice we will likely prefer to use a canned routine which allows for the estimation of the interaction weighted estimator, as well as the corresponding variance-covariance matrix. To see that our process of "manually" buidling up Sun and Abraham's estimator from its composite parts, and to additionally conduct inference in a direct way, we can use estimation routines such as `feols` and `sunab` functions from the `fixest` package in `R`. Below we do this, showing the point estimates recovered are identical to what we have done.  

Note the usage of the `sunab` function which expands dummies as we have done above first takes the variable that records treatment cohorts and next the variable which describes the relative time to treatment.  If the second variable points to the year, this function automatically and internally creates the relative time to treatment period. It is also important to see that we have slightly modify the data for those never treated units such that they take a very high value in the `X_nfd` variable, this is because the `sunab` function would drop this observations if the `X_nfd` has missing values (`NA`) in this variable and instead considers a never treated unit if the relative time to treatment is always negative. It is thus sufficient for a period beyond the last year of the data to be indicated, so that never treated are correctly viewed as units which have not *yet* adopted. Finally note the second part of the formula, after `|`, indicates the fixed effects and automatically clusters by the first variable:

```{r}
data2 <- data |> mutate(X_nfd = ifelse(is.na(X_nfd), 5000, X_nfd)) 
library(fixest)
IW <- feols(data = data2,
            fml = asmrs ~ sunab(X_nfd, year) + pcinc + asmrh + 
              cases | stfips + year)
coefs <- cbind(c(summary(IW)$coeftable[1:20, "Estimate"], 0, 
                 summary(IW)$coeftable[21:48, "Estimate"]), coefs)
colnames(coefs)[1] <- "feols IW"
kbl(list(coefs[1:21,], coefs[22:49,]), booktabs = T, digits = 2, linesep = "") %>% 
  kable_styling(font_size = 10, bootstrap_options = c("striped", "hover"), full_width = T)
```

Finally, we plot the output along with its 95% confidence intervals to compare this with our original event study.

```{r}
# Create Cols for IW Estimates Information
plot_df <- plot_df |> mutate(IWEstimate = NA,
                             IWSE = NA)
# Assign IW Estimates Information
plot_df[1:20, c("IWEstimate", "IWSE")] <- IW$coeftable[1:20, c("Estimate",
                                                               "Std. Error")]
plot_df[21, c("IWEstimate", "IWSE")] <- 0
plot_df[22:49, c("IWEstimate", "IWSE")] <- IW$coeftable[21:48, c("Estimate",
                                                               "Std. Error")]
# Graph
ggplot(data = plot_df) + geom_point(aes(x = Time, y = Estimate)) +
  geom_errorbar(aes(ymin = Estimate - 1.96 * SE, ymax = Estimate + 1.96 * SE, 
                    x = Time)) + 
  geom_point(aes(x = Time, y = IWEstimate), color = "blue",
             position = position_nudge(x = 0.4)) +
  geom_errorbar(aes(ymin = IWEstimate - 1.96 * IWSE, 
                    ymax = IWEstimate + 1.96 * IWSE, 
                    x = Time), color = "blue", 
                position = position_nudge(x = 0.4)) + 
  geom_hline(yintercept = 0, color = 'red') + geom_vline(xintercept = -1) +
  scale_x_continuous(limits = c(-21, 28), breaks = seq(-20, 25, 5)) +
  scale_y_continuous(limits = c(-40, 40), breaks = seq(-40, 40, 20)) +
  labs(x = 'Time To Treatment', y = 'Suicide per 1m Woman')
```

## Code call-out 4.4: Synthetic control, difference-in-differences, and synthetic difference-in-differences

The synthetic control method seeks to construct a "synthetic control" for a treated unit (in this case, California) using a weighted combination of control units (other states). The aim is for this synthetic control to closely resemble the treated unit in the pre-treatment period based on predictor variables.

- Use the 'synth' command to construct the synthetic control for California
- Predictor variables: cigsale from specific years, beer, lnincome, retprice, age15to24
- Treated unit: California (state==3)
- Treatment period: 1989
- Periods used to construct the synthetic control: 1980-1988

Once the synthetic control is constructed, we can compare the trends of the treated unit and the synthetic control in the post-treatment period. Any divergence in trends is interpreted as the treatment effect. In this case, we are assessing the impact of a hypothetical policy implemented in California in 1989 on cigarette sales.
```{r}
library(Synth)
library(haven)


california_data_url <- "Datasets/Abadie_data.csv"

california_dataframe <- read.csv(california_data_url)

dataprep_out <- dataprep(
  foo = california_dataframe,
  predictors = c("lnincome", "age15to24", "beer", "retprice"),
  special.predictors = list(
    list("cigsale", 1975, c("mean")),
    list("cigsale", 1980, c("mean")),
    list("cigsale", 1988, c("mean"))
  ),
  dependent = "cigsale",
  unit.variable = "state",
  time.variable = "year",
  treatment.identifier = "California",
  controls.identifier = unique(california_dataframe$state_name[-which(california_dataframe$state_name == "California")]),
  time.predictors.prior = 1970:1988,
  time.optimize.ssr = 1970:1988,
  time.plot = 1970:2000,
  unit.names.variable = "state_name"
) 


synth_out <- synth(
  data.prep.obj = dataprep_out
)


library(ggplot2)

# Synthetic California
synth_california <- dataprep_out$Y0 %*% synth_out$solution.w

# Data frame for plotting
plot_data <- data.frame(
  Year = 1970:2000,
  Cigsale = c(synth_california, dataprep_out$Y1),
  Type = rep(c("Synthetic California", "California"), each = 31)
)


line_types <- c("California" = "solid", "Synthetic California" = "dashed")
line_colors <- c("California" = "blue", "Synthetic California" = "red")
line_size <- 0.72  # Adjust this value as needed for line thickness

# Synthetic Control Plot
p <- ggplot(data = plot_data, aes(x = Year, y = Cigsale, color = Type, linetype = Type)) +
  geom_line(size = line_size) +  # Set line thickness
  geom_vline(xintercept = 1989, linetype = "dashed", color = "black", size = 0.7) +  # Same size for consistency
  labs(title = "Cigarette Sales in California vs. Synthetic Control",
       subtitle = "Tobacco Policy Change (1989)",
       x = "Year",
       y = "Cigarette Sales") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        legend.title = element_blank(),
        legend.position = "bottom",
        legend.box.background = element_rect(color = "white", linewidth = 0.5),
        axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)),
        legend.text = element_text(size = 8)) +
  scale_color_manual(values = line_colors) +  # Set line colors
  scale_linetype_manual(values = line_types)  # Set line types

p
#ggsave("C:\\Users\\maria\\Desktop\\RA Microeconometría\\Cap4\\Abadie\\synthetic_control_plot.jpg", plot = p, width = 7, height = 5, dpi = 300)
```
**Results:**

- The synthetic control for California is constructed using a combination of other states. Specifically, weights are assigned to states like Colorado, Connecticut, Montana, Nevada, New Mexico, and Utah.
- The RMSPE (Root Mean Squared Prediction Error) is a measure of how well the synthetic control approximates California in the pre-treatment period. A lower RMSPE indicates a better fit. In this case, the RMSPE is 1.756235, suggesting a reasonably good fit.
- The "Predictor Balance" table shows how California and the synthetic control compare in terms of the predictor variables. The figures show that there is a good balance between the treated unit and the synthetic control on these variables.
- The graph displays per capita cigarette sales in California and the synthetic control over time. The divergence between the two lines post-1989 represents the estimated effect of the policy
